version: '2.1'
services:
  movielib_db:
    image: postgres
    container_name: MOVIELIB_DB
    env_file:
      - .env
    ports:
      -  ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - ${POSTGRE_DB_LOCATION}/data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    container_name: MOVIELIB_pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASS}
    ports:
      - "${PGADMIN_PORT}:80"

  db_service:
    network_mode: host
    container_name: MOVIELIB_DBupdater
    build:
      context: ./
      dockerfile: Dockerfile_MOVIELIB_master
    env_file:
      - .env
    restart: on-failure
    depends_on:
      movielib_db:
        condition: service_healthy

  plex:
    image: ghcr.io/linuxserver/plex
    container_name: MOVIELIB_Plex
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - VERSION=docker
    volumes:
      - ${PLEX_FILES_LOCATION}:/config
      - ${PLEX_TV_LIBRARY_FOLDER}:/tv
      - ${PLEX_MOVIES_LIBRARY_FOLDER}:/movies
    restart: unless-stopped

# Docker mod should be in .env
  transmission:
    container_name: MOVIELIB_Transmission
    build:
      context: ./
      dockerfile: Dockerfile_transmission
    env_file:
      - .env
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - TRANSMISSION_WEB_HOME=/combustion-release/
      - USER=${TRANSMISSION_USER}
      - PASS=${TRANSMISSION_PASS}
    volumes:
      - ${TRANSMISSION_FILES_LOCATION}:/config
      - ${TRANSMISSION_FILES_LOCATION}/downloads:/downloads
      - ${TRANSMISSION_FILES_LOCATION}/watch:/watch
      - ${PLEX_TV_LIBRARY_FOLDER}:/tv
      - ${PLEX_MOVIES_LIBRARY_FOLDER}:/movies
      - /mnt/Media/books/downloads:/books
    ports:
      - 9091:9091
      - 51413:51413
      - 51413:51413/udp
    restart: unless-stopped

  myimdb_service:
    container_name: MOVIELIB_myImdb
    network_mode: host
    build:
      context: ./
      dockerfile: Dockerfile_myimdb
    env_file:
      - .env
    restart: on-failure
    depends_on:
      movielib_db:
        condition: service_healthy

  filelist_service:
    container_name: MOVIELIB_Filelist
    network_mode: host
    build:
      context: ./
      dockerfile: Dockerfile_newsletter
    env_file:
      - .env
    restart: on-failure
    depends_on:
      movielib_db:
        condition: service_healthy

  torrent_service:
    container_name: MOVIELIB_TorrentAPI
    network_mode: host
    build:
      context: ./
      dockerfile: Dockerfile_torrapi
    env_file:
      - .env
    restart: on-failure
    depends_on:
      movielib_db:
        condition: service_healthy

  telegram_service:
    container_name: MOVIELIB_Telegram
    network_mode: host
    build:
      context: ./
      dockerfile: Dockerfile_telegram
    env_file:
      - .env
    restart: on-failure
    depends_on:
      movielib_db:
        condition: service_healthy
